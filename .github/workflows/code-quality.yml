name: Code Quality Checks

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  schedule:
    # Run every Monday at 00:00 UTC
    - cron: '0 0 * * 1'

jobs:
  code-quality-metrics:
    name: Code Quality Metrics
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Verify package-lock.json is in sync
        run: |
          npm ci --dry-run || {
            echo "::error::package.json and package-lock.json are out of sync."
            echo "::error::Please run 'npm install' locally and commit the updated package-lock.json."
            exit 1
          }

      - name: Install dependencies
        run: npm ci

      - name: Count lines of code
        run: |
          echo "### Code Statistics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY

          # TypeScript files
          ts_count=$(find src -name "*.ts" -o -name "*.tsx" | wc -l)
          echo "| TypeScript files | $ts_count |" >> $GITHUB_STEP_SUMMARY

          # Lines of code
          loc=$(find src -name "*.ts" -o -name "*.tsx" | xargs wc -l | tail -1 | awk '{print $1}')
          echo "| Total lines | $loc |" >> $GITHUB_STEP_SUMMARY

          # Test files
          test_count=$(find src -name "*.test.ts" -o -name "*.test.tsx" -o -name "*.spec.ts" | wc -l)
          echo "| Test files | $test_count |" >> $GITHUB_STEP_SUMMARY

          # Components
          comp_count=$(find src/components -name "*.tsx" 2>/dev/null | wc -l)
          echo "| Components | $comp_count |" >> $GITHUB_STEP_SUMMARY

      - name: Check for large files
        run: |
          echo "### Large Files Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          find src -type f \( -name "*.ts" -o -name "*.tsx" \) -exec wc -l {} \; | sort -rn | head -10 | while read lines file; do
            if [ "$lines" -gt 500 ]; then
              echo "::warning file=$file::File has $lines lines"
              echo "- ⚠️ \`$file\`: $lines lines" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: Check cyclomatic complexity
        run: |
          npx ts-node -e "
          const fs = require('fs');
          const path = require('path');
          const glob = require('glob');

          console.log('Analyzing code complexity...');

          // This is a placeholder - you can integrate tools like:
          // - eslint-plugin-complexity
          // - plato
          // - jscpd (for copy-paste detection)
          " || echo "Complexity analysis skipped"
        continue-on-error: true

  duplicate-code:
    name: Duplicate Code Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install jscpd
        run: npm install -g jscpd

      - name: Run duplicate code detection
        run: |
          jscpd src --min-lines 10 --min-tokens 50 --format "typescript,tsx" --reporters "console" || true
        continue-on-error: true

  bundle-size:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Verify package-lock.json is in sync
        run: |
          npm ci --dry-run || {
            echo "::error::package.json and package-lock.json are out of sync."
            echo "::error::Please run 'npm install' locally and commit the updated package-lock.json."
            exit 1
          }

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build
        env:
          NEXT_PUBLIC_APPWRITE_ENDPOINT: https://cloud.appwrite.io/v1
          NEXT_PUBLIC_APPWRITE_PROJECT_ID: test-project-id
          NEXT_PUBLIC_DATABASE_ID: test-db
          NEXT_PUBLIC_STORAGE_DOCUMENTS: documents
          NEXT_PUBLIC_STORAGE_RECEIPTS: receipts
          NEXT_PUBLIC_STORAGE_PHOTOS: photos
          NEXT_PUBLIC_STORAGE_REPORTS: reports

      - name: Analyze bundle size
        run: |
          if [ -d ".next" ]; then
            echo "### Bundle Size Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            total_size=$(du -sh .next | cut -f1)
            echo "- **Total build size**: $total_size" >> $GITHUB_STEP_SUMMARY

            if [ -d ".next/static" ]; then
              static_size=$(du -sh .next/static | cut -f1)
              echo "- **Static assets**: $static_size" >> $GITHUB_STEP_SUMMARY
            fi

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### Largest files:" >> $GITHUB_STEP_SUMMARY
            find .next -type f -exec du -h {} \; | sort -rh | head -10 | while read size file; do
              echo "- \`$file\`: $size" >> $GITHUB_STEP_SUMMARY
            done
          fi

  typescript-strict:
    name: TypeScript Strict Mode Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Verify package-lock.json is in sync
        run: |
          npm ci --dry-run || {
            echo "::error::package.json and package-lock.json are out of sync."
            echo "::error::Please run 'npm install' locally and commit the updated package-lock.json."
            exit 1
          }

      - name: Install dependencies
        run: npm ci

      - name: Run strict type check
        run: npm run typecheck
        continue-on-error: true

      - name: Count type errors
        run: |
          error_count=$(npm run typecheck 2>&1 | grep -c "error TS" || echo "0")
          echo "### TypeScript Errors" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Total errors found: **$error_count**" >> $GITHUB_STEP_SUMMARY

          if [ "$error_count" -gt 0 ]; then
            echo "::warning::Found $error_count TypeScript errors"
          fi
        continue-on-error: true

  unused-dependencies:
    name: Unused Dependencies Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Verify package-lock.json is in sync
        run: |
          npm ci --dry-run || {
            echo "::error::package.json and package-lock.json are out of sync."
            echo "::error::Please run 'npm install' locally and commit the updated package-lock.json."
            exit 1
          }

      - name: Install dependencies
        run: npm ci

      - name: Install depcheck
        run: npm install -g depcheck

      - name: Check for unused dependencies
        run: |
          depcheck --json > depcheck-report.json || true
          cat depcheck-report.json
        continue-on-error: true

      - name: Upload depcheck report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: depcheck-report
          path: depcheck-report.json
          if-no-files-found: ignore
